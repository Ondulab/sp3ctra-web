---
import { tv, type VariantProps } from "tailwind-variants";

const buttonStyles = tv({
  base: "inline-flex cursor-pointer items-center justify-center rounded-lg font-semibold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background",
  variants: {
    variant: {
      primary:
        "bg-foreground text-background border border-foreground hover:bg-foreground/90 focus:ring-primary",
      secondary:
        "bg-surface border border-border text-foreground hover:bg-surface/80 focus:ring-primary",
      ghost: "bg-transparent text-foreground hover:bg-surface/50 focus:ring-primary",
    },
    size: {
      sm: "px-4 py-2 text-sm gap-2",
      md: "px-6 py-3 text-base gap-3",
      lg: "px-8 py-4 text-lg gap-4",
    },
    disabled: {
      true: "opacity-50 cursor-not-allowed pointer-events-none",
    },
  },
  defaultVariants: {
    variant: "primary",
    size: "md",
  },
});

const iconStyles = tv({
  base: "flex-shrink-0",
  variants: {
    size: {
      sm: "w-4 h-4",
      md: "w-5 h-5",
      lg: "w-6 h-6",
    },
  },
});

interface Props extends VariantProps<typeof buttonStyles> {
  href?: string; // If provided, renders as <a>, else <button>
  type?: "button" | "submit" | "reset"; // For <button> elements
  ariaLabel?: string; // Accessibility label
  class?: string; // Additional classes
  icon?: any; // Icon component from lucide-astro
  iconPos?: "left" | "right"; // Icon position
}

const {
  href,
  type = "button",
  ariaLabel,
  class: className,
  variant,
  size,
  disabled,
  icon: Icon,
  iconPos = "left",
  ...rest
} = Astro.props;

const Element = href ? "a" : "button";
const elementProps = href ? { href, ...rest } : { type, disabled, ...rest };
const iconSize = iconStyles({ size });
---

<Element
  class={buttonStyles({ variant, size, disabled, className })}
  aria-label={ariaLabel}
  {...elementProps}
>
  {Icon && iconPos === "left" && <Icon class={iconSize} />}
  <slot />
  {Icon && iconPos === "right" && <Icon class={iconSize} />}
</Element>
